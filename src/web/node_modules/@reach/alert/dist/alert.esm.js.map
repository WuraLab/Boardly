{"version":3,"file":"alert.esm.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/alert!\n *\n * An alert is an element that displays a brief, important message in a way that\n * attracts the user's attention without interrupting the user's task.\n * Dynamically rendered alerts are automatically announced by most screen\n * readers, and in some operating systems, they may trigger an alert sound.\n *\n * The approach here is to allow developers to render a visual <Alert> and then\n * we mirror that to a couple of aria-live regions behind the scenes. This way,\n * most of the time, developers don't have to think about visual vs. aria\n * alerts.\n *\n * Limitations: Developers can't read from context inside of an Alert because\n * we aren't using ReactDOM.createPortal(), we're actually creating a couple of\n * brand new React roots. We could use createPortal but then apps would need to\n * render the entire app tree in an <AlertProvider>, or maybe there's a way\n * with default context to do it, but we haven't explored that yet. So, we'll\n * see how this goes. If it becomes a problem we can introduce a portal later.\n *\n * @see Docs     https://reach.tech/alert\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/alert\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#alert\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { VisuallyHidden } from \"@reach/visually-hidden\";\nimport {\n  forwardRefWithAs,\n  getOwnerDocument,\n  usePrevious,\n  useForkedRef,\n} from \"@reach/utils\";\nimport PropTypes from \"prop-types\";\n\n/*\n * Singleton state is fine because you don't server render\n * an alert (SRs don't read them on first load anyway)\n */\nlet keys: RegionKeys = {\n  polite: -1,\n  assertive: -1,\n};\n\nlet elements: ElementTypes = {\n  polite: {},\n  assertive: {},\n};\n\nlet liveRegions: RegionElements = {\n  polite: null,\n  assertive: null,\n};\n\nlet renderTimer: number | null;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Alert\n *\n * Screen-reader-friendly alert messages. In many apps developers add \"alert\"\n * messages when network events or other things happen. Users with assistive\n * technologies may not know about the message unless you develop for it.\n *\n * @see Docs https://reach.tech/alert\n */\nconst Alert = forwardRefWithAs<AlertProps, \"div\">(function Alert(\n  { as: Comp = \"div\", children, type: regionType = \"polite\", ...props },\n  forwardedRef\n) {\n  const ownRef = React.useRef<HTMLDivElement>(null);\n  const ref = useForkedRef(forwardedRef, ownRef);\n  const child = React.useMemo(\n    () => (\n      <Comp {...props} ref={ref} data-reach-alert>\n        {children}\n      </Comp>\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [children, props]\n  );\n  useMirrorEffects(regionType, child, ownRef);\n\n  return child;\n});\n\n/**\n * @see Docs https://reach.tech/alert#alert-props\n */\ntype AlertProps = {\n  /**\n   * Controls whether the assistive technology should read immediately\n   * (\"assertive\") or wait until the user is idle (\"polite\").\n   *\n   * @see Docs https://reach.tech/alert#alert-type\n   */\n  type?: \"assertive\" | \"polite\";\n  children: React.ReactNode;\n};\n\nif (__DEV__) {\n  Alert.displayName = \"Alert\";\n  Alert.propTypes = {\n    children: PropTypes.node,\n    type: PropTypes.oneOf([\"assertive\", \"polite\"]),\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction createMirror(type: \"polite\" | \"assertive\", doc: Document): Mirror {\n  let key = ++keys[type];\n\n  let mount = (element: JSX.Element) => {\n    if (liveRegions[type]) {\n      elements[type][key] = element;\n      renderAlerts();\n    } else {\n      let node = doc.createElement(\"div\");\n      node.setAttribute(`data-reach-live-${type}`, \"true\");\n      liveRegions[type] = node;\n      doc.body.appendChild(liveRegions[type]!);\n      mount(element);\n    }\n  };\n\n  let update = (element: JSX.Element) => {\n    elements[type][key] = element;\n    renderAlerts();\n  };\n\n  let unmount = () => {\n    delete elements[type][key];\n    renderAlerts();\n  };\n\n  return { mount, update, unmount };\n}\n\nfunction renderAlerts() {\n  if (renderTimer != null) {\n    window.clearTimeout(renderTimer);\n  }\n  renderTimer = window.setTimeout(() => {\n    Object.keys(elements).forEach((elementType) => {\n      let regionType: RegionTypes = elementType as RegionTypes;\n      let container = liveRegions[regionType]!;\n      if (container) {\n        ReactDOM.render(\n          <VisuallyHidden as=\"div\">\n            <div\n              // The status role is a type of live region and a container whose\n              // content is advisory information for the user that is not\n              // important enough to justify an alert, and is often presented as\n              // a status bar. When the role is added to an element, the browser\n              // will send out an accessible status event to assistive\n              // technology products which can then notify the user about it.\n              // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role\n              role={regionType === \"assertive\" ? \"alert\" : \"status\"}\n              aria-live={regionType}\n            >\n              {Object.keys(elements[regionType]).map((key) =>\n                React.cloneElement(elements[regionType][key], {\n                  key,\n                  ref: null,\n                })\n              )}\n            </div>\n          </VisuallyHidden>,\n          liveRegions[regionType]\n        );\n      }\n    });\n  }, 500);\n}\n\nfunction useMirrorEffects(\n  regionType: RegionTypes,\n  element: JSX.Element,\n  ref: React.RefObject<Element>\n) {\n  const prevType = usePrevious<RegionTypes>(regionType);\n  const mirror = React.useRef<Mirror | null>(null);\n  const mounted = React.useRef(false);\n  React.useEffect(() => {\n    const ownerDocument = getOwnerDocument(ref.current)!;\n\n    if (!mounted.current) {\n      mounted.current = true;\n      mirror.current = createMirror(regionType, ownerDocument);\n      mirror.current.mount(element);\n    } else if (prevType !== regionType) {\n      mirror.current && mirror.current.unmount();\n      mirror.current = createMirror(regionType, ownerDocument);\n      mirror.current.mount(element);\n    } else {\n      mirror.current && mirror.current.update(element);\n    }\n  }, [element, regionType, prevType, ref]);\n\n  React.useEffect(() => {\n    return () => {\n      mirror.current && mirror.current.unmount();\n    };\n  }, []);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype Mirror = {\n  mount: (element: JSX.Element) => void;\n  update: (element: JSX.Element) => void;\n  unmount: () => void;\n};\n\ntype RegionTypes = \"polite\" | \"assertive\";\n\ntype ElementTypes = {\n  [key in RegionTypes]: {\n    [key: string]: JSX.Element;\n  };\n};\n\ntype RegionElements<T extends HTMLElement = HTMLDivElement> = {\n  [key in RegionTypes]: T | null;\n};\n\ntype RegionKeys = {\n  [key in RegionTypes]: number;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// Exports\n\nexport type { AlertProps };\nexport { Alert };\nexport default Alert;\n"],"names":["keys","polite","assertive","elements","liveRegions","renderTimer","Alert","forwardRefWithAs","forwardedRef","as","Comp","children","type","regionType","props","ownRef","React","ref","useForkedRef","child","useMirrorEffects","displayName","propTypes","PropTypes","node","oneOf","createMirror","doc","key","mount","element","renderAlerts","createElement","setAttribute","body","appendChild","update","unmount","window","clearTimeout","setTimeout","Object","forEach","elementType","container","ReactDOM","VisuallyHidden","role","map","prevType","usePrevious","mirror","mounted","ownerDocument","getOwnerDocument","current"],"mappings":"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"}