{"version":3,"file":"alert.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/alert!\n *\n * An alert is an element that displays a brief, important message in a way that\n * attracts the user's attention without interrupting the user's task.\n * Dynamically rendered alerts are automatically announced by most screen\n * readers, and in some operating systems, they may trigger an alert sound.\n *\n * The approach here is to allow developers to render a visual <Alert> and then\n * we mirror that to a couple of aria-live regions behind the scenes. This way,\n * most of the time, developers don't have to think about visual vs. aria\n * alerts.\n *\n * Limitations: Developers can't read from context inside of an Alert because\n * we aren't using ReactDOM.createPortal(), we're actually creating a couple of\n * brand new React roots. We could use createPortal but then apps would need to\n * render the entire app tree in an <AlertProvider>, or maybe there's a way\n * with default context to do it, but we haven't explored that yet. So, we'll\n * see how this goes. If it becomes a problem we can introduce a portal later.\n *\n * @see Docs     https://reach.tech/alert\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/alert\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#alert\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { VisuallyHidden } from \"@reach/visually-hidden\";\nimport {\n  forwardRefWithAs,\n  getOwnerDocument,\n  usePrevious,\n  useForkedRef,\n} from \"@reach/utils\";\nimport PropTypes from \"prop-types\";\n\n/*\n * Singleton state is fine because you don't server render\n * an alert (SRs don't read them on first load anyway)\n */\nlet keys: RegionKeys = {\n  polite: -1,\n  assertive: -1,\n};\n\nlet elements: ElementTypes = {\n  polite: {},\n  assertive: {},\n};\n\nlet liveRegions: RegionElements = {\n  polite: null,\n  assertive: null,\n};\n\nlet renderTimer: number | null;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Alert\n *\n * Screen-reader-friendly alert messages. In many apps developers add \"alert\"\n * messages when network events or other things happen. Users with assistive\n * technologies may not know about the message unless you develop for it.\n *\n * @see Docs https://reach.tech/alert\n */\nconst Alert = forwardRefWithAs<AlertProps, \"div\">(function Alert(\n  { as: Comp = \"div\", children, type: regionType = \"polite\", ...props },\n  forwardedRef\n) {\n  const ownRef = React.useRef<HTMLDivElement>(null);\n  const ref = useForkedRef(forwardedRef, ownRef);\n  const child = React.useMemo(\n    () => (\n      <Comp {...props} ref={ref} data-reach-alert>\n        {children}\n      </Comp>\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [children, props]\n  );\n  useMirrorEffects(regionType, child, ownRef);\n\n  return child;\n});\n\n/**\n * @see Docs https://reach.tech/alert#alert-props\n */\ntype AlertProps = {\n  /**\n   * Controls whether the assistive technology should read immediately\n   * (\"assertive\") or wait until the user is idle (\"polite\").\n   *\n   * @see Docs https://reach.tech/alert#alert-type\n   */\n  type?: \"assertive\" | \"polite\";\n  children: React.ReactNode;\n};\n\nif (__DEV__) {\n  Alert.displayName = \"Alert\";\n  Alert.propTypes = {\n    children: PropTypes.node,\n    type: PropTypes.oneOf([\"assertive\", \"polite\"]),\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction createMirror(type: \"polite\" | \"assertive\", doc: Document): Mirror {\n  let key = ++keys[type];\n\n  let mount = (element: JSX.Element) => {\n    if (liveRegions[type]) {\n      elements[type][key] = element;\n      renderAlerts();\n    } else {\n      let node = doc.createElement(\"div\");\n      node.setAttribute(`data-reach-live-${type}`, \"true\");\n      liveRegions[type] = node;\n      doc.body.appendChild(liveRegions[type]!);\n      mount(element);\n    }\n  };\n\n  let update = (element: JSX.Element) => {\n    elements[type][key] = element;\n    renderAlerts();\n  };\n\n  let unmount = () => {\n    delete elements[type][key];\n    renderAlerts();\n  };\n\n  return { mount, update, unmount };\n}\n\nfunction renderAlerts() {\n  if (renderTimer != null) {\n    window.clearTimeout(renderTimer);\n  }\n  renderTimer = window.setTimeout(() => {\n    Object.keys(elements).forEach((elementType) => {\n      let regionType: RegionTypes = elementType as RegionTypes;\n      let container = liveRegions[regionType]!;\n      if (container) {\n        ReactDOM.render(\n          <VisuallyHidden as=\"div\">\n            <div\n              // The status role is a type of live region and a container whose\n              // content is advisory information for the user that is not\n              // important enough to justify an alert, and is often presented as\n              // a status bar. When the role is added to an element, the browser\n              // will send out an accessible status event to assistive\n              // technology products which can then notify the user about it.\n              // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role\n              role={regionType === \"assertive\" ? \"alert\" : \"status\"}\n              aria-live={regionType}\n            >\n              {Object.keys(elements[regionType]).map((key) =>\n                React.cloneElement(elements[regionType][key], {\n                  key,\n                  ref: null,\n                })\n              )}\n            </div>\n          </VisuallyHidden>,\n          liveRegions[regionType]\n        );\n      }\n    });\n  }, 500);\n}\n\nfunction useMirrorEffects(\n  regionType: RegionTypes,\n  element: JSX.Element,\n  ref: React.RefObject<Element>\n) {\n  const prevType = usePrevious<RegionTypes>(regionType);\n  const mirror = React.useRef<Mirror | null>(null);\n  const mounted = React.useRef(false);\n  React.useEffect(() => {\n    const ownerDocument = getOwnerDocument(ref.current)!;\n\n    if (!mounted.current) {\n      mounted.current = true;\n      mirror.current = createMirror(regionType, ownerDocument);\n      mirror.current.mount(element);\n    } else if (prevType !== regionType) {\n      mirror.current && mirror.current.unmount();\n      mirror.current = createMirror(regionType, ownerDocument);\n      mirror.current.mount(element);\n    } else {\n      mirror.current && mirror.current.update(element);\n    }\n  }, [element, regionType, prevType, ref]);\n\n  React.useEffect(() => {\n    return () => {\n      mirror.current && mirror.current.unmount();\n    };\n  }, []);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype Mirror = {\n  mount: (element: JSX.Element) => void;\n  update: (element: JSX.Element) => void;\n  unmount: () => void;\n};\n\ntype RegionTypes = \"polite\" | \"assertive\";\n\ntype ElementTypes = {\n  [key in RegionTypes]: {\n    [key: string]: JSX.Element;\n  };\n};\n\ntype RegionElements<T extends HTMLElement = HTMLDivElement> = {\n  [key in RegionTypes]: T | null;\n};\n\ntype RegionKeys = {\n  [key in RegionTypes]: number;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// Exports\n\nexport type { AlertProps };\nexport { Alert };\nexport default Alert;\n"],"names":["renderTimer","keys","polite","assertive","elements","liveRegions","Alert","forwardRefWithAs","forwardedRef","as","Comp","children","type","regionType","props","ownRef","React","ref","useForkedRef","child","element","prevType","usePrevious","mirror","mounted","ownerDocument","getOwnerDocument","current","unmount","createMirror","mount","update","useMirrorEffects","doc","key","renderAlerts","node","createElement","setAttribute","body","appendChild","window","clearTimeout","setTimeout","Object","forEach","elementType","ReactDOM","VisuallyHidden","role","map"],"mappings":"sMAuCA,IAeIA,EAfAC,EAAmB,CACrBC,QAAS,EACTC,WAAY,GAGVC,EAAyB,CAC3BF,OAAQ,GACRC,UAAW,IAGTE,EAA8B,CAChCH,OAAQ,KACRC,UAAW,MAgBPG,EAAQC,oBAAoC,WAEhDC,WADEC,GAAIC,aAAO,QAAOC,IAAAA,aAAUC,KAAMC,aAAa,WAAaC,iKAGxDC,EAASC,SAA6B,MACtCC,EAAMC,eAAaV,EAAcO,GACjCI,EAAQH,WACZ,kBACEA,gBAACN,mBAASI,GAAOG,IAAKA,0BACnBN,MAIJA,EAAUG,WAiGf,SACED,EACAO,EACAH,OAEMI,EAAWC,cAAyBT,GACpCU,EAASP,SAA4B,MACrCQ,EAAUR,UAAa,GAC7BA,aAAgB,eACRS,EAAgBC,mBAAiBT,EAAIU,SAEtCH,EAAQG,QAIFN,IAAaR,GACtBU,EAAOI,SAAWJ,EAAOI,QAAQC,UACjCL,EAAOI,QAAUE,EAAahB,EAAYY,GAC1CF,EAAOI,QAAQG,MAAMV,IAErBG,EAAOI,SAAWJ,EAAOI,QAAQI,OAAOX,IARxCI,EAAQG,SAAU,EAClBJ,EAAOI,QAAUE,EAAahB,EAAYY,GAC1CF,EAAOI,QAAQG,MAAMV,MAQtB,CAACA,EAASP,EAAYQ,EAAUJ,IAEnCD,aAAgB,kBACP,WACLO,EAAOI,SAAWJ,EAAOI,QAAQC,aAElC,IA3HHI,CAAiBnB,EAAYM,EAAOJ,GAE7BI,KA2BT,SAASU,EAAajB,EAA8BqB,OAC9CC,IAAQjC,EAAKW,SAyBV,CAAEkB,MAvBG,SAARA,EAASV,MACPf,EAAYO,GACdR,EAASQ,GAAMsB,GAAOd,EACtBe,QACK,KACDC,EAAOH,EAAII,cAAc,OAC7BD,EAAKE,gCAAgC1B,EAAQ,QAC7CP,EAAYO,GAAQwB,EACpBH,EAAIM,KAAKC,YAAYnC,EAAYO,IACjCkB,EAAMV,KAcMW,OAVH,SAACX,GACZhB,EAASQ,GAAMsB,GAAOd,EACtBe,KAQsBP,QALV,kBACLxB,EAASQ,GAAMsB,GACtBC,MAMJ,SAASA,IACY,MAAfnC,GACFyC,OAAOC,aAAa1C,GAEtBA,EAAcyC,OAAOE,YAAW,WAC9BC,OAAO3C,KAAKG,GAAUyC,SAAQ,SAACC,OACzBjC,EAA0BiC,EACdzC,EAAYQ,IAE1BkC,SACE/B,gBAACgC,kBAAevC,GAAG,OACjBO,uBAQEiC,KAAqB,cAAfpC,EAA6B,QAAU,qBAClCA,GAEV+B,OAAO3C,KAAKG,EAASS,IAAaqC,KAAI,SAAChB,UACtClB,eAAmBZ,EAASS,GAAYqB,GAAM,CAC5CA,IAAAA,EACAjB,IAAK,YAKbZ,EAAYQ,SAIjB"}