{"version":3,"sources":["../../src/use-pin-input.ts"],"names":["useDescendant","useDescendants","useControllableState","useId","ariaAttr","callAllHandlers","createContext","mergeRefs","React","PinInputProvider","usePinInputContext","name","errorMessage","toArray","value","split","validate","type","NUMERIC_REGEX","ALPHA_NUMERIC_REGEX","regex","test","usePinInput","props","autoFocus","defaultValue","onChange","onComplete","placeholder","manageFocus","otp","id","idProp","isDisabled","isInvalid","mask","uuid","domContext","descendants","moveFocus","setMoveFocus","useState","values","setValues","join","useEffect","firstInput","element","focus","focusNext","useCallback","index","nextInput","setValue","nextValues","isComplete","length","every","inputValue","clear","Array","fill","getNextValue","eventValue","nextValue","charAt","focusedIndex","setFocusedIndex","getInputProps","rest","event","target","currentValue","filter","_","onKeyDown","key","prevInput","onFocus","onBlur","hasFocus","inputType","inputMode","disabled","autoComplete","usePinInputField","forwardedRef","ref","useRef","context","current"],"mappings":"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","sourcesContent":["import { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport { useControllableState, useId } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  createContext,\n  mergeRefs,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype InputProps = Omit<\n  React.ComponentPropsWithRef<\"input\">,\n  \"color\" | \"height\" | \"width\"\n>\n\nexport type PinInputContext = UsePinInputReturn & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nconst [PinInputProvider, usePinInputContext] = createContext<PinInputContext>({\n  name: \"PinInputContext\",\n  errorMessage:\n    \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n})\n\nexport { PinInputProvider, usePinInputContext }\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * If `true`, the pin input component signals to its fields that they should\n   * use `autocomplete=\"one-time-code\"`.\n   */\n  otp?: boolean\n  /**\n   * The top-level id string that will be applied to the input fields.\n   * The index of the input will be appended to this top-level id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n  /**\n   * The type of values the pin-input should allow\n   */\n  type?: \"alphanumeric\" | \"number\"\n  /**\n   * If `true`, the input's value will be masked just like `type=password`\n   */\n  mask?: boolean\n}\n\nconst toArray = (value?: string) => value?.split(\"\")\n\nfunction validate(value: string, type: UsePinInputProps[\"type\"]) {\n  const NUMERIC_REGEX = /^[0-9]+$/\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX\n  return regex.test(value)\n}\n\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"○\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const domContext = useDescendants<HTMLInputElement, {}>()\n  const { descendants } = domContext\n\n  const [moveFocus, setMoveFocus] = React.useState(true)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  React.useEffect(() => {\n    if (autoFocus) {\n      const firstInput = descendants[0]\n      firstInput?.element?.focus()\n    }\n    // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants])\n\n  const focusNext = React.useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n\n      const nextInput = descendants[index + 1]\n      nextInput?.element?.focus()\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = React.useCallback(\n    (value: string, index: number) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      const isComplete =\n        value !== \"\" &&\n        index === descendants.length - 1 &&\n        nextValues.every((inputValue) => inputValue !== \"\")\n\n      if (isComplete) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants.length],\n  )\n\n  const clear = React.useCallback(() => {\n    const values: string[] = Array(descendants.length).fill(\"\")\n    setValues(values)\n    const firstInput = descendants[0]\n    firstInput.element?.focus()\n  }, [descendants, setValues])\n\n  const getNextValue = React.useCallback(\n    (value: string, eventValue: string) => {\n      let nextValue = eventValue\n      if (value?.length > 0) {\n        if (value[0] === eventValue.charAt(0)) {\n          nextValue = eventValue.charAt(1)\n        } else if (value[0] === eventValue.charAt(1)) {\n          nextValue = eventValue.charAt(0)\n        }\n      }\n      return nextValue\n    },\n    [],\n  )\n\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  const getInputProps = React.useCallback(\n    (props: InputProps & { index: number }): InputProps => {\n      const { index, ...rest } = props\n\n      /**\n       * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n       */\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const eventValue = event.target.value\n        const currentValue = values[index]\n        const nextValue = getNextValue(currentValue, eventValue)\n\n        // if the value was removed using backspace\n        if (nextValue === \"\") {\n          setValue(\"\", index)\n          return\n        }\n\n        // in the case of an autocomplete or copy and paste\n        if (eventValue.length > 2) {\n          // see if we can use the string to fill out our values\n          if (validate(eventValue, type)) {\n            // Ensure the value matches the number of inputs\n            const nextValue = eventValue\n              .split(\"\")\n              .filter((_, index) => index < descendants.length)\n\n            setValues(nextValue)\n\n            // if pasting fills the entire input fields, trigger `onComplete`\n            if (nextValue.length === descendants.length) {\n              onComplete?.(nextValue.join(\"\"))\n            }\n          }\n        } else {\n          // only set if the new value is a number\n          if (validate(nextValue, type)) {\n            setValue(nextValue, index)\n          }\n\n          setMoveFocus(true)\n        }\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === \"Backspace\" && manageFocus) {\n          if ((event.target as HTMLInputElement).value === \"\") {\n            const prevInput = descendants[index - 1]\n            if (prevInput) {\n              setValue(\"\", index - 1)\n              prevInput.element?.focus()\n              setMoveFocus(true)\n            }\n          } else {\n            setMoveFocus(false)\n          }\n        }\n      }\n\n      const onFocus = () => {\n        setFocusedIndex(index)\n      }\n\n      const onBlur = () => {\n        setFocusedIndex(-1)\n      }\n\n      const hasFocus = focusedIndex === index\n      const inputType = type === \"number\" ? \"tel\" : \"text\"\n\n      return {\n        \"aria-label\": \"Please enter your pin code\",\n        inputMode: type === \"number\" ? \"numeric\" : \"text\",\n        type: mask ? \"password\" : inputType,\n        ...rest,\n        id: `${id}-${index}`,\n        disabled: isDisabled,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        onChange: callAllHandlers(rest.onChange, onChange),\n        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(rest.onFocus, onFocus),\n        onBlur: callAllHandlers(rest.onBlur, onBlur),\n        value: values[index] || \"\",\n        autoComplete: otp ? \"one-time-code\" : \"off\",\n        placeholder: hasFocus ? \"\" : placeholder,\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      getNextValue,\n      id,\n      isDisabled,\n      mask,\n      isInvalid,\n      manageFocus,\n      onComplete,\n      otp,\n      placeholder,\n      setValue,\n      setValues,\n      type,\n      values,\n    ],\n  )\n\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    domContext,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps extends InputProps {\n  ref?: React.Ref<HTMLInputElement>\n}\n\nexport function usePinInputField(\n  props: UsePinInputFieldProps = {},\n  forwardedRef: React.Ref<any> = null,\n) {\n  const ref = React.useRef<HTMLInputElement>(null)\n\n  const { domContext, getInputProps } = usePinInputContext()\n\n  const index = useDescendant({\n    context: domContext,\n    element: ref.current,\n  })\n\n  return getInputProps({\n    ...props,\n    ref: mergeRefs(ref, forwardedRef),\n    index,\n  })\n}\n"],"file":"use-pin-input.js"}