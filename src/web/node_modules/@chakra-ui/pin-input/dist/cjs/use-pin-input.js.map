{"version":3,"sources":["../../src/use-pin-input.ts"],"names":["name","errorMessage","PinInputProvider","usePinInputContext","toArray","value","split","validate","type","NUMERIC_REGEX","ALPHA_NUMERIC_REGEX","regex","test","usePinInput","props","autoFocus","defaultValue","onChange","onComplete","placeholder","manageFocus","otp","idProp","id","isDisabled","isInvalid","mask","uuid","domContext","descendants","React","useState","moveFocus","setMoveFocus","values","join","setValues","useEffect","firstInput","element","focus","focusNext","useCallback","index","nextInput","setValue","nextValues","isComplete","length","every","inputValue","clear","Array","fill","getNextValue","eventValue","nextValue","charAt","focusedIndex","setFocusedIndex","getInputProps","rest","event","target","currentValue","filter","_","onKeyDown","key","prevInput","onFocus","onBlur","hasFocus","inputType","inputMode","disabled","autoComplete","usePinInputField","forwardedRef","ref","useRef","context","current"],"mappings":"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","sourcesContent":["import { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport { useControllableState, useId } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  createContext,\n  mergeRefs,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype InputProps = Omit<\n  React.ComponentPropsWithRef<\"input\">,\n  \"color\" | \"height\" | \"width\"\n>\n\nexport type PinInputContext = UsePinInputReturn & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nconst [PinInputProvider, usePinInputContext] = createContext<PinInputContext>({\n  name: \"PinInputContext\",\n  errorMessage:\n    \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n})\n\nexport { PinInputProvider, usePinInputContext }\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * If `true`, the pin input component signals to its fields that they should\n   * use `autocomplete=\"one-time-code\"`.\n   */\n  otp?: boolean\n  /**\n   * The top-level id string that will be applied to the input fields.\n   * The index of the input will be appended to this top-level id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n  /**\n   * The type of values the pin-input should allow\n   */\n  type?: \"alphanumeric\" | \"number\"\n  /**\n   * If `true`, the input's value will be masked just like `type=password`\n   */\n  mask?: boolean\n}\n\nconst toArray = (value?: string) => value?.split(\"\")\n\nfunction validate(value: string, type: UsePinInputProps[\"type\"]) {\n  const NUMERIC_REGEX = /^[0-9]+$/\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX\n  return regex.test(value)\n}\n\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"○\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const domContext = useDescendants<HTMLInputElement, {}>()\n  const { descendants } = domContext\n\n  const [moveFocus, setMoveFocus] = React.useState(true)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  React.useEffect(() => {\n    if (autoFocus) {\n      const firstInput = descendants[0]\n      firstInput?.element?.focus()\n    }\n    // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants])\n\n  const focusNext = React.useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n\n      const nextInput = descendants[index + 1]\n      nextInput?.element?.focus()\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = React.useCallback(\n    (value: string, index: number) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      const isComplete =\n        value !== \"\" &&\n        index === descendants.length - 1 &&\n        nextValues.every((inputValue) => inputValue !== \"\")\n\n      if (isComplete) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants.length],\n  )\n\n  const clear = React.useCallback(() => {\n    const values: string[] = Array(descendants.length).fill(\"\")\n    setValues(values)\n    const firstInput = descendants[0]\n    firstInput.element?.focus()\n  }, [descendants, setValues])\n\n  const getNextValue = React.useCallback(\n    (value: string, eventValue: string) => {\n      let nextValue = eventValue\n      if (value?.length > 0) {\n        if (value[0] === eventValue.charAt(0)) {\n          nextValue = eventValue.charAt(1)\n        } else if (value[0] === eventValue.charAt(1)) {\n          nextValue = eventValue.charAt(0)\n        }\n      }\n      return nextValue\n    },\n    [],\n  )\n\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  const getInputProps = React.useCallback(\n    (props: InputProps & { index: number }): InputProps => {\n      const { index, ...rest } = props\n\n      /**\n       * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n       */\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const eventValue = event.target.value\n        const currentValue = values[index]\n        const nextValue = getNextValue(currentValue, eventValue)\n\n        // if the value was removed using backspace\n        if (nextValue === \"\") {\n          setValue(\"\", index)\n          return\n        }\n\n        // in the case of an autocomplete or copy and paste\n        if (eventValue.length > 2) {\n          // see if we can use the string to fill out our values\n          if (validate(eventValue, type)) {\n            // Ensure the value matches the number of inputs\n            const nextValue = eventValue\n              .split(\"\")\n              .filter((_, index) => index < descendants.length)\n\n            setValues(nextValue)\n\n            // if pasting fills the entire input fields, trigger `onComplete`\n            if (nextValue.length === descendants.length) {\n              onComplete?.(nextValue.join(\"\"))\n            }\n          }\n        } else {\n          // only set if the new value is a number\n          if (validate(nextValue, type)) {\n            setValue(nextValue, index)\n          }\n\n          setMoveFocus(true)\n        }\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === \"Backspace\" && manageFocus) {\n          if ((event.target as HTMLInputElement).value === \"\") {\n            const prevInput = descendants[index - 1]\n            if (prevInput) {\n              setValue(\"\", index - 1)\n              prevInput.element?.focus()\n              setMoveFocus(true)\n            }\n          } else {\n            setMoveFocus(false)\n          }\n        }\n      }\n\n      const onFocus = () => {\n        setFocusedIndex(index)\n      }\n\n      const onBlur = () => {\n        setFocusedIndex(-1)\n      }\n\n      const hasFocus = focusedIndex === index\n      const inputType = type === \"number\" ? \"tel\" : \"text\"\n\n      return {\n        \"aria-label\": \"Please enter your pin code\",\n        inputMode: type === \"number\" ? \"numeric\" : \"text\",\n        type: mask ? \"password\" : inputType,\n        ...rest,\n        id: `${id}-${index}`,\n        disabled: isDisabled,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        onChange: callAllHandlers(rest.onChange, onChange),\n        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(rest.onFocus, onFocus),\n        onBlur: callAllHandlers(rest.onBlur, onBlur),\n        value: values[index] || \"\",\n        autoComplete: otp ? \"one-time-code\" : \"off\",\n        placeholder: hasFocus ? \"\" : placeholder,\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      getNextValue,\n      id,\n      isDisabled,\n      mask,\n      isInvalid,\n      manageFocus,\n      onComplete,\n      otp,\n      placeholder,\n      setValue,\n      setValues,\n      type,\n      values,\n    ],\n  )\n\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    domContext,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps extends InputProps {\n  ref?: React.Ref<HTMLInputElement>\n}\n\nexport function usePinInputField(\n  props: UsePinInputFieldProps = {},\n  forwardedRef: React.Ref<any> = null,\n) {\n  const ref = React.useRef<HTMLInputElement>(null)\n\n  const { domContext, getInputProps } = usePinInputContext()\n\n  const index = useDescendant({\n    context: domContext,\n    element: ref.current,\n  })\n\n  return getInputProps({\n    ...props,\n    ref: mergeRefs(ref, forwardedRef),\n    index,\n  })\n}\n"],"file":"use-pin-input.js"}