{"version":3,"sources":["../../../src/config/others.ts"],"names":["memoizedGet","get","createParser","system","getIsRtl","floatTransform","value","_","props","map","left","right","srOnly","border","clip","width","height","margin","padding","overflow","whiteSpace","position","srFocusable","config","animation","appearance","visibility","userSelect","pointerEvents","cursor","resize","objectFit","objectPosition","float","property","transform","willChange","filter","clipPath","layerStyle","processResult","theme","textStyle","apply","others","othersParser"],"mappings":"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","sourcesContent":["import { memoizedGet as get } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { Config, createParser, PropConfig, system } from \"../core\"\nimport { Length, ResponsiveValue } from \"../utils\"\nimport { getIsRtl } from \"../utils/directionality\"\n\nconst floatTransform: PropConfig[\"transform\"] = (value, _, props = {}) => {\n  const map = { left: \"right\", right: \"left\" }\n  return getIsRtl(props) ? map[value] : value\n}\n\nconst srOnly = {\n  border: \"0px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  width: \"1px\",\n  height: \"1px\",\n  margin: \"-1px\",\n  padding: \"0px\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\",\n}\n\nconst srFocusable = {\n  position: \"static\",\n  width: \"auto\",\n  height: \"auto\",\n  clip: \"auto\",\n  padding: \"0\",\n  margin: \"0\",\n  overflow: \"visible\",\n  whiteSpace: \"normal\",\n}\n\nconst config: Config = {\n  animation: true,\n  appearance: true,\n  visibility: true,\n  userSelect: true,\n  pointerEvents: true,\n  cursor: true,\n  resize: true,\n  objectFit: true,\n  objectPosition: true,\n  float: {\n    property: \"float\",\n    transform: floatTransform,\n  },\n  willChange: true,\n  filter: true,\n  clipPath: true,\n  srOnly: {\n    property: \"&\",\n    transform(value) {\n      if (value === true) return srOnly\n      if (value === \"focusable\") return srFocusable\n      return {}\n    },\n  },\n  layerStyle: {\n    processResult: true,\n    property: \"&\",\n    transform: (value, _, theme) => get(theme, `layerStyles.${value}`, {}),\n  },\n  textStyle: {\n    processResult: true,\n    property: \"&\",\n    transform: (value, _, theme) => get(theme, `textStyles.${value}`, {}),\n  },\n  apply: {\n    processResult: true,\n    property: \"&\",\n    transform: (value, _, theme) => get(theme, value, {}),\n  },\n}\n\nexport interface OtherProps {\n  /**\n   * The CSS `animation` property\n   */\n  animation?: ResponsiveValue<CSS.Property.Animation>\n  /**\n   * The CSS `appearance` property\n   */\n  appearance?: ResponsiveValue<CSS.Property.Appearance>\n  /**\n   * The CSS `visibility` property\n   */\n  visibility?: ResponsiveValue<CSS.Property.Visibility>\n  /**\n   * The CSS `user-select` property\n   */\n  userSelect?: ResponsiveValue<CSS.Property.UserSelect>\n  /**\n   * The CSS `pointer-events` property\n   */\n  pointerEvents?: ResponsiveValue<CSS.Property.PointerEvents>\n  /**\n   * The CSS `cursor` property\n   */\n  cursor?: ResponsiveValue<CSS.Property.Cursor>\n  /**\n   * The CSS `resize` property\n   */\n  resize?: ResponsiveValue<CSS.Property.Resize>\n  /**\n   * The CSS `object-fit` property\n   */\n  objectFit?: ResponsiveValue<CSS.Property.ObjectFit>\n  /**\n   * The CSS `object-position` property\n   */\n  objectPosition?: ResponsiveValue<CSS.Property.ObjectPosition<Length>>\n  /**\n   * The CSS `float` property\n   */\n  float?: ResponsiveValue<CSS.Property.Float>\n  /**\n   * The CSS `will-change` property\n   */\n  willChange?: ResponsiveValue<CSS.Property.WillChange>\n  /**\n   * The CSS `filter` property\n   */\n  filter?: ResponsiveValue<CSS.Property.Filter>\n  /**\n   * If `true`, hide an element visually without hiding it from screen readers.\n   *\n   * If `focusable`, the sr-only styles will be undone, making the element visible\n   * to sighted users as well as screen readers.\n   */\n  srOnly?: true | \"focusable\"\n  /**\n   * The CSS `clip-path` property.\n   *\n   * It creates a clipping region that sets what part of an element should be shown.\n   */\n  clipPath?: ResponsiveValue<CSS.Property.ClipPath>\n  /**\n   * The layer style object to apply.\n   * Note: Styles must be located in `theme.layerStyles`\n   */\n  layerStyle?: ResponsiveValue<string>\n  /**\n   * The text style object to apply.\n   * Note: Styles must be located in `theme.textStyles`\n   */\n  textStyle?: ResponsiveValue<string>\n  /**\n   * Apply theme-aware style objects in `theme`\n   */\n  apply?: ResponsiveValue<string>\n}\n\nexport const others = system(config)\nexport const othersParser = createParser(config)\n"],"file":"others.js"}