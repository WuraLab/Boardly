import { Dict } from "@chakra-ui/utils";
import * as CSS from "csstype";
import * as System from "./config";
import { Pseudos } from "./pseudo";
import { ResponsiveValue } from "./utils";
export interface StyleProps extends System.SpaceProps, System.ColorProps, System.TransitionProps, System.TypographyProps, System.FlexboxProps, System.TransformProps, System.GridProps, System.LayoutProps, System.BorderProps, System.ShadowProps, System.BackgroundProps, System.ListProps, System.PositionProps, System.OutlineProps, System.OtherProps {
}
export interface SystemCSSProperties extends CSS.Properties, Omit<StyleProps, keyof CSS.Properties> {
}
export declare type ThemeThunk<T> = T | ((theme: Dict) => T);
declare type PropertyValue<K extends keyof SystemCSSProperties> = ThemeThunk<ResponsiveValue<boolean | number | string | SystemCSSProperties[K]>>;
export declare type CSSWithMultiValues = {
    [K in keyof SystemCSSProperties]?: K extends keyof StyleProps ? StyleProps[K] | PropertyValue<K> : PropertyValue<K>;
};
declare type PseudoKeys = keyof CSS.Pseudos | keyof Pseudos;
declare type PseudoSelectorDefinition<D> = D | RecursivePseudo<D>;
declare type RecursivePseudo<D> = {
    [K in PseudoKeys]?: PseudoSelectorDefinition<D> & D;
};
declare type CSSDefinition<D> = D | string | RecursiveCSSSelector<D | string>;
interface RecursiveCSSSelector<D> {
    [selector: string]: CSSDefinition<D> & D;
}
export declare type RecursiveCSSObject<D> = D & (D | RecursivePseudo<D> | RecursiveCSSSelector<D>);
export declare type CSSObject = RecursiveCSSObject<CSSWithMultiValues>;
export declare type SystemStyleObject = CSSObject;
export interface FunctionCSSInterpolation {
    (theme: Dict): CSSObject;
}
export declare type StyleObjectOrFn = CSSObject | FunctionCSSInterpolation;
declare type PseudoProps = {
    [K in keyof Pseudos]?: SystemStyleObject;
};
export interface SystemProps extends StyleProps, PseudoProps {
}
export {};
