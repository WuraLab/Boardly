{"version":3,"sources":["../../src/use-checkbox.ts"],"names":["useBoolean","useControllableProp","useSafeLayoutEffect","callAllHandlers","dataAttr","mergeRefs","warn","visuallyHiddenStyle","useCallback","useRef","useState","ReactDOM","useCheckbox","props","defaultIsChecked","defaultChecked","isChecked","checkedProp","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isIndeterminate","isInvalid","name","value","id","htmlProps","isFocused","setFocused","isHovered","setHovered","isActive","setActive","ref","checkedState","setCheckedState","isControlled","condition","message","handleChange","event","preventDefault","target","checked","current","indeterminate","Boolean","trulyDisabled","onKeyDown","key","on","onKeyUp","off","notInSync","getCheckboxProps","forwardedRef","onPressDown","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getInputProps","focus","flushSync","type","onBlur","onFocus","required","disabled","readOnly","style","getLabelProps","stopEvent","onTouchStart","state","stopPropagation"],"mappings":"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","sourcesContent":["import {\n  useBoolean,\n  useControllableProp,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  dataAttr,\n  mergeRefs,\n  PropGetter,\n  warn,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\nimport ReactDOM from \"react-dom\"\n\nexport interface UseCheckboxProps {\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the checkbox will be indeterminate.\n   * This only affects the icon shown inside checkbox\n   * and does not modify the isChecked property.\n   */\n  isIndeterminate?: boolean\n  /**\n   * If `true`, the checkbox will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is passed, the checkbox will\n   * remain tabbable but not interactive\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the checkbox will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the checkbox is marked as invalid.\n   * Changes style of unchecked state.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the checkbox input is marked as required,\n   * and `required` attribute will be added\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   * @deprecated Please use the `defaultChecked` prop, which mirrors default\n   * React checkbox behavior.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes..\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n  /**\n   * The name of the input field in a checkbox\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the checkbox input.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * id assigned to input\n   */\n  id?: string\n}\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox#hooks\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovered] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [checkedState, setCheckedState] = useState(!!defaultChecked)\n\n  const [isControlled, isChecked] = useControllableProp(\n    checkedProp,\n    checkedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChange?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChange,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (ref.current) {\n      ref.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n    const notInSync = ref.current.checked !== isChecked\n    if (notInSync) {\n      setCheckedState(ref.current.checked)\n    }\n  }, [ref.current])\n\n  const getCheckboxProps: PropGetter = (props = {}, forwardedRef = null) => {\n    const onPressDown = (event: React.MouseEvent) => {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault()\n      setActive.on()\n    }\n\n    return {\n      ...props,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off),\n    }\n  }\n\n  const getInputProps: PropGetter = (props = {}, forwardedRef = null) => {\n    // This is a workaround for React Concurrent Mode issue https://github.com/facebook/react/issues/18591. Remove once it's fixed.\n    const focus = () => {\n      if (typeof (ReactDOM as any).flushSync === \"function\") {\n        ;(ReactDOM as any).flushSync(() => {\n          setFocused.on()\n        })\n      } else {\n        setFocused.on()\n      }\n    }\n\n    return {\n      ...props,\n      ref: mergeRefs(ref, forwardedRef),\n      type: \"checkbox\",\n      name,\n      value,\n      id,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(props.onFocus, focus),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-invalid\": isInvalid,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle,\n    }\n  }\n\n  const getLabelProps: PropGetter = (props = {}, forwardedRef = null) => ({\n    ...props,\n    ref: forwardedRef,\n    onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n    onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n"],"file":"use-checkbox.js"}