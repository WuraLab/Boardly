{"version":3,"sources":["../../src/use-id.ts"],"names":["handoffComplete","id","genId","useId","idProp","prefix","initialId","React","useState","uid","setUid","useEffect","toString","undefined","useIds","prefixes","map"],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA;AACA;AACA;AACA,IAAIA,eAAe,GAAG,KAAtB;AACA,IAAIC,EAAE,GAAG,CAAT;;AACA,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,SAAM,EAAED,EAAR;AAAA,CAAd;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASE,KAAT,CAAeC,MAAf,EAAgCC,MAAhC,EAAiD;AACtD,MAAMC,SAAS,GAAGF,MAAM,KAAKJ,eAAe,GAAGE,KAAK,EAAR,GAAa,IAAjC,CAAxB;;AADsD,wBAEhCK,KAAK,CAACC,QAAN,CAAeF,SAAf,CAFgC;AAAA,MAE/CG,GAF+C;AAAA,MAE1CC,MAF0C;;AAItD,gDAAoB,YAAM;AACxB,QAAID,GAAG,KAAK,IAAZ,EAAkBC,MAAM,CAACR,KAAK,EAAN,CAAN;AACnB,GAFD,EAEG,EAFH;AAIAK,EAAAA,KAAK,CAACI,SAAN,CAAgB,YAAM;AACpB,QAAIX,eAAe,KAAK,KAAxB,EAA+B;AAC7BA,MAAAA,eAAe,GAAG,IAAlB;AACD;AACF,GAJD,EAIG,EAJH;AAMA,MAAMC,EAAE,GAAGQ,GAAG,IAAI,IAAP,GAAcA,GAAG,CAACG,QAAJ,EAAd,GAA+BC,SAA1C;AACA,SAAQR,MAAM,GAAMA,MAAN,SAAgBJ,EAAhB,GAAuBA,EAArC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASa,MAAT,CAAgBV,MAAhB,EAAwD;AAC7D,MAAMH,EAAE,GAAGE,KAAK,CAACC,MAAD,CAAhB;;AAD6D,oCAApBW,QAAoB;AAApBA,IAAAA,QAAoB;AAAA;;AAE7D,SAAOA,QAAQ,CAACC,GAAT,CAAa,UAACX,MAAD;AAAA,WAAeA,MAAf,SAAyBJ,EAAzB;AAAA,GAAb,CAAP;AACD","sourcesContent":["import * as React from \"react\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\n\n/**\n * Credit: https://github.com/reach/reach-ui/blob/develop/packages/auto-id/src/index.tsx\n */\nlet handoffComplete = false\nlet id = 0\nconst genId = () => ++id\n\n/**\n * Reack hook to generate unique id\n *\n * @param idProp the external id passed from the user\n * @param prefix prefix to append before the id\n */\nexport function useId(idProp?: string, prefix?: string) {\n  const initialId = idProp || (handoffComplete ? genId() : null)\n  const [uid, setUid] = React.useState(initialId)\n\n  useSafeLayoutEffect(() => {\n    if (uid === null) setUid(genId())\n  }, [])\n\n  React.useEffect(() => {\n    if (handoffComplete === false) {\n      handoffComplete = true\n    }\n  }, [])\n\n  const id = uid != null ? uid.toString() : undefined\n  return (prefix ? `${prefix}-${id}` : id) as string\n}\n\n/**\n * Reack hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\nexport function useIds(idProp?: string, ...prefixes: string[]) {\n  const id = useId(idProp)\n  return prefixes.map((prefix) => `${prefix}-${id}`)\n}\n"],"file":"use-id.js"}