{"version":3,"sources":["../../src/use-controllable.ts"],"names":["useControllableProp","prop","state","isControlled","undefined","value","useControllableState","props","valueProp","defaultValue","onChange","handleChange","React","useState","valueState","setValue","updateValue","useCallback","next","nextValue"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;;;AAEO,SAASA,mBAAT,CAAgCC,IAAhC,EAAqDC,KAArD,EAA+D;AACpE,MAAMC,YAAY,GAAGF,IAAI,KAAKG,SAA9B;AACA,MAAMC,KAAK,GAAGF,YAAY,IAAI,OAAOF,IAAP,KAAgB,WAAhC,GAA8CA,IAA9C,GAAqDC,KAAnE;AACA,SAAO,CAACC,YAAD,EAAeE,KAAf,CAAP;AACD;;AAqBD;AACA;AACA;AACA;AACO,SAASC,oBAAT,CAAiCC,KAAjC,EAAsE;AAAA,MAC5DC,SAD4D,GACtBD,KADsB,CACnEF,KADmE;AAAA,MACjDI,YADiD,GACtBF,KADsB,CACjDE,YADiD;AAAA,MACnCC,QADmC,GACtBH,KADsB,CACnCG,QADmC;AAE3E,MAAMC,YAAY,GAAG,oCAAeD,QAAf,CAArB;;AAF2E,wBAI5CE,KAAK,CAACC,QAAN,CAAeJ,YAAf,CAJ4C;AAAA,MAIpEK,UAJoE;AAAA,MAIxDC,QAJwD;;AAK3E,MAAMZ,YAAY,GAAGK,SAAS,KAAKJ,SAAnC;AAEA,MAAMC,KAAK,GAAGF,YAAY,GAAIK,SAAJ,GAAsBM,UAAhD;AAEA,MAAME,WAAW,GAAGJ,KAAK,CAACK,WAAN,CAClB,UAACC,IAAD,EAAmC;AACjC,QAAMC,SAAS,GAAG,oBAAQD,IAAR,EAAcb,KAAd,CAAlB;;AACA,QAAI,CAACF,YAAL,EAAmB;AACjBY,MAAAA,QAAQ,CAACI,SAAD,CAAR;AACD;;AACDR,IAAAA,YAAY,CAACQ,SAAD,CAAZ;AACD,GAPiB,EAQlB,CAAChB,YAAD,EAAeQ,YAAf,EAA6BN,KAA7B,CARkB,CAApB;AAWA,SAAO,CAACA,KAAD,EAAQW,WAAR,CAAP;AACD","sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const isControlled = prop !== undefined\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void\n  /**\n   * The component name (for warnings)\n   */\n  name?: string\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const { value: valueProp, defaultValue, onChange } = props\n  const handleChange = useCallbackRef(onChange)\n\n  const [valueState, setValue] = React.useState(defaultValue as T)\n  const isControlled = valueProp !== undefined\n\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = React.useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n      handleChange(nextValue)\n    },\n    [isControlled, handleChange, value],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"],"file":"use-controllable.js"}