{"version":3,"sources":["../../src/use-event-listener.ts"],"names":["React","isBrowser","useCallbackRef","useEventListener","event","handler","env","options","document","fn","useEffect","undefined","listener","addEventListener","removeEventListener"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CACLC,KADK,EAELC,OAFK,EAGLC,GAHK,EAILC,OAJK,EAKL;AAAA,MAFAD,GAEA;AAFAA,IAAAA,GAEA,GAFqCL,SAAS,GAAGO,QAAH,GAAc,IAE5D;AAAA;;AACA,MAAMC,EAAE,GAAGP,cAAc,CAACG,OAAD,CAAzB;AAEAL,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACJ,GAAL,EAAU,OAAOK,SAAP;;AAEV,QAAMC,QAAQ,GAAIR,KAAD,IAAgB;AAC/BK,MAAAA,EAAE,CAACL,KAAD,CAAF;AACD,KAFD;;AAIAE,IAAAA,GAAG,CAACO,gBAAJ,CAAqBT,KAArB,EAA4BQ,QAA5B,EAAsCL,OAAtC;AACA,WAAO,MAAM;AACXD,MAAAA,GAAG,CAACQ,mBAAJ,CAAwBV,KAAxB,EAA+BQ,QAA/B,EAAyCL,OAAzC;AACD,KAFD;AAGD,GAXD,EAWG,CAACH,KAAD,EAAQE,GAAR,EAAaC,OAAb,EAAsBE,EAAtB,CAXH;AAaA,SAAO,MAAM;AAAA;;AACX,YAAAH,GAAG,SAAH,iBAAKQ,mBAAL,CAAyBV,KAAzB,EAAgCK,EAAhC,EAAoCF,OAApC;AACD,GAFD;AAGD","sourcesContent":["import * as React from \"react\"\nimport { isBrowser } from \"@chakra-ui/utils\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n */\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  event: K,\n  handler: (event: DocumentEventMap[K]) => void,\n  env: Document | HTMLElement | null = isBrowser ? document : null,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const fn = useCallbackRef(handler) as any\n\n  React.useEffect(() => {\n    if (!env) return undefined\n\n    const listener = (event: any) => {\n      fn(event)\n    }\n\n    env.addEventListener(event, listener, options)\n    return () => {\n      env.removeEventListener(event, listener, options)\n    }\n  }, [event, env, options, fn])\n\n  return () => {\n    env?.removeEventListener(event, fn, options)\n  }\n}\n"],"file":"use-event-listener.js"}