{"version":3,"sources":["../../src/use-controllable.ts"],"names":["runIfFn","React","useCallbackRef","useControllableProp","prop","state","isControlled","undefined","value","useControllableState","props","valueProp","defaultValue","onChange","handleChange","valueState","setValue","useState","updateValue","useCallback","next","nextValue"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AAEA,OAAO,SAASC,mBAAT,CAAgCC,IAAhC,EAAqDC,KAArD,EAA+D;AACpE,MAAMC,YAAY,GAAGF,IAAI,KAAKG,SAA9B;AACA,MAAMC,KAAK,GAAGF,YAAY,IAAI,OAAOF,IAAP,KAAgB,WAAhC,GAA8CA,IAA9C,GAAqDC,KAAnE;AACA,SAAO,CAACC,YAAD,EAAeE,KAAf,CAAP;AACD;;AAqBD;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAT,CAAiCC,KAAjC,EAAsE;AAC3E,MAAM;AAAEF,IAAAA,KAAK,EAAEG,SAAT;AAAoBC,IAAAA,YAApB;AAAkCC,IAAAA;AAAlC,MAA+CH,KAArD;AACA,MAAMI,YAAY,GAAGZ,cAAc,CAACW,QAAD,CAAnC;AAEA,MAAM,CAACE,UAAD,EAAaC,QAAb,IAAyBf,KAAK,CAACgB,QAAN,CAAeL,YAAf,CAA/B;AACA,MAAMN,YAAY,GAAGK,SAAS,KAAKJ,SAAnC;AAEA,MAAMC,KAAK,GAAGF,YAAY,GAAIK,SAAJ,GAAsBI,UAAhD;AAEA,MAAMG,WAAW,GAAGjB,KAAK,CAACkB,WAAN,CACjBC,IAAD,IAAmC;AACjC,QAAMC,SAAS,GAAGrB,OAAO,CAACoB,IAAD,EAAOZ,KAAP,CAAzB;;AACA,QAAI,CAACF,YAAL,EAAmB;AACjBU,MAAAA,QAAQ,CAACK,SAAD,CAAR;AACD;;AACDP,IAAAA,YAAY,CAACO,SAAD,CAAZ;AACD,GAPiB,EAQlB,CAACf,YAAD,EAAeQ,YAAf,EAA6BN,KAA7B,CARkB,CAApB;AAWA,SAAO,CAACA,KAAD,EAAQU,WAAR,CAAP;AACD","sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const isControlled = prop !== undefined\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void\n  /**\n   * The component name (for warnings)\n   */\n  name?: string\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const { value: valueProp, defaultValue, onChange } = props\n  const handleChange = useCallbackRef(onChange)\n\n  const [valueState, setValue] = React.useState(defaultValue as T)\n  const isControlled = valueProp !== undefined\n\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = React.useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n      handleChange(nextValue)\n    },\n    [isControlled, handleChange, value],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"],"file":"use-controllable.js"}