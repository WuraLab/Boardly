{"version":3,"sources":["../../src/system.ts"],"names":["css","propNames","isFunction","objectFilter","_styled","shouldForwardProp","domElements","stylePropNames","reduce","acc","key","getStyleObject","baseStyle","props","theme","noOfLines","isTruncated","cssProp","__css","sx","rest","styleProps","_","prop","truncateStyle","overflow","textOverflow","display","WebkitBoxOrient","WebkitLineClamp","whiteSpace","finalStyles","Object","assign","computedCSS","cssObject","styled","component","options","styledOptions","styleObject","chakra","forEach","tag"],"mappings":"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","sourcesContent":["import {\n  css,\n  propNames,\n  ResponsiveValue,\n  StyleProps,\n  SystemStyleObject,\n} from \"@chakra-ui/styled-system\"\nimport { Dict, isFunction, objectFilter } from \"@chakra-ui/utils\"\nimport _styled, {\n  CSSObject,\n  FunctionInterpolation,\n  Interpolation,\n} from \"@emotion/styled\"\nimport { shouldForwardProp } from \"./should-forward-prop\"\nimport { As, ChakraComponent, ChakraProps, PropsOf } from \"./system.types\"\nimport { domElements, DOMElements } from \"./system.utils\"\n\n/**\n * Convert propNames array to object to faster lookup perf\n */\nconst stylePropNames = propNames.reduce((acc, key) => {\n  if (typeof key !== \"object\" && typeof key !== \"function\") acc[key] = key\n  return acc\n}, {})\n\ntype StyleResolverProps = SystemStyleObject & {\n  __css?: SystemStyleObject\n  sx?: SystemStyleObject\n  theme: Dict\n  css?: CSSObject\n  noOfLines?: ResponsiveValue<number>\n  isTruncated?: boolean\n}\n\ninterface GetStyleObject {\n  (options: {\n    baseStyle?: SystemStyleObject\n  }): FunctionInterpolation<StyleResolverProps>\n}\n\n/**\n * Style resolver function that manages how style props are merged\n * in combination with other possible ways of defining styles.\n *\n * For example, take a component defined this way:\n * ```jsx\n * <Box fontSize=\"24px\" sx={{ fontSize: \"40px\" }}></Box>\n * ```\n *\n * We want to manage the priority of the styles properly to prevent unwanted\n * behaviors. Right now, the `sx` prop has the highest priority so the resolved\n * fontSize will be `40px`\n */\nexport const getStyleObject: GetStyleObject = ({ baseStyle }) => (props) => {\n  const {\n    theme,\n    noOfLines,\n    isTruncated,\n    css: cssProp,\n    __css,\n    sx,\n    ...rest\n  } = props\n\n  // filter out props that aren't style props\n  const styleProps = objectFilter(rest, (_, prop) => prop in stylePropNames)\n\n  let truncateStyle: any = {}\n\n  if (noOfLines != null) {\n    truncateStyle = {\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      display: \"-webkit-box\",\n      WebkitBoxOrient: \"vertical\",\n      WebkitLineClamp: noOfLines,\n    }\n  } else if (isTruncated) {\n    truncateStyle = {\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      whiteSpace: \"nowrap\",\n    }\n  }\n\n  /**\n   * The computed, theme-aware style object. The other of the properties\n   * within `objectAssign` determines how styles are overriden.\n   */\n  const finalStyles = Object.assign(\n    {},\n    __css,\n    baseStyle,\n    truncateStyle,\n    styleProps,\n    sx,\n  )\n\n  // Converts theme-aware style object to real css object\n  const computedCSS = css(finalStyles)(props.theme)\n\n  // Merge the computed css object with styles in css prop\n  const cssObject: Interpolation<StyleResolverProps> = Object.assign(\n    computedCSS,\n    isFunction(cssProp) ? cssProp(theme) : cssProp,\n  )\n\n  return cssObject\n}\n\ninterface StyledOptions {\n  shouldForwardProp?(prop: string): boolean\n  label?: string\n  baseStyle?: SystemStyleObject\n}\n\nexport function styled<T extends As, P = {}>(\n  component: T,\n  options?: StyledOptions,\n) {\n  const { baseStyle, ...styledOptions } = options ?? {}\n\n  if (!styledOptions.shouldForwardProp) {\n    styledOptions.shouldForwardProp = shouldForwardProp\n  }\n\n  const styleObject = getStyleObject({ baseStyle })\n  return _styled(\n    component as React.ComponentType<any>,\n    styledOptions,\n  )(styleObject) as ChakraComponent<T, P>\n}\n\nexport type HTMLChakraComponents = {\n  [Tag in DOMElements]: ChakraComponent<Tag, {}>\n}\n\nexport type HTMLChakraProps<T extends As> = Omit<\n  PropsOf<T>,\n  T extends \"svg\"\n    ? \"ref\" | \"children\" | keyof StyleProps\n    : \"ref\" | keyof StyleProps\n> &\n  ChakraProps & { as?: As }\n\ntype ChakraFactory = {\n  <T extends As, P = {}>(\n    component: T,\n    options?: StyledOptions,\n  ): ChakraComponent<T, P>\n}\n\nexport const chakra = (styled as unknown) as ChakraFactory &\n  HTMLChakraComponents\n\ndomElements.forEach((tag) => {\n  chakra[tag] = chakra(tag)\n})\n"],"file":"system.js"}