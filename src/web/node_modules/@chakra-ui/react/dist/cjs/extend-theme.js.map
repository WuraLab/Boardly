{"version":3,"sources":["../../src/extend-theme.ts"],"names":["extendTheme","overrides","baseTheme","defaultTheme","customizer","source","override","key","object","Object","prototype","hasOwnProperty","call","sourceValue","overrideValue","undefined"],"mappings":";;;;;AAAA;;AACA;;;;AAuBA;AACA;AACA;AACA;AACA;AACO,SAASA,WAAT,CAILC,SAJK,EAKLC,SALK,EAMkB;AAAA,MADvBA,SACuB;AADvBA,IAAAA,SACuB,GADAC,iBACA;AAAA;;AACvB,WAASC,UAAT,CACEC,MADF,EAEEC,QAFF,EAGEC,GAHF,EAIEC,MAJF,EAKE;AACA,QACE,CAAC,uBAAWH,MAAX,KAAsB,uBAAWC,QAAX,CAAvB,KACAG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CD,GAA7C,CAFF,EAGE;AACA,aAAO,YAAwB;AAC7B,YAAMM,WAAW,GAAG,uBAAWR,MAAX,IAAqBA,MAAM,MAAN,mBAArB,GAAuCA,MAA3D;AAEA,YAAMS,aAAa,GAAG,uBAAWR,QAAX,IAClBA,QAAQ,MAAR,mBADkB,GAElBA,QAFJ;AAIA,eAAO,sBAAU,EAAV,EAAcO,WAAd,EAA2BC,aAA3B,EAA0CV,UAA1C,CAAP;AACD,OARD;AASD,KAdD,CAgBA;;;AACA,WAAOW,SAAP;AACD;;AAED,SAAO,sBAAU,EAAV,EAAcb,SAAd,EAAyBD,SAAzB,EAAoCG,UAApC,CAAP;AACD","sourcesContent":["import defaultTheme, { ChakraTheme, DefaultChakraTheme } from \"@chakra-ui/theme\"\nimport { isFunction, mergeWith } from \"@chakra-ui/utils\"\n\ntype CloneKey<Target, Key> = Key extends keyof Target ? Target[Key] : unknown\n\n/**\n * Represents a loose but specific type for the theme override.\n * It provides autocomplete hints for extending the theme, but leaves room\n * for adding properties.\n */\ntype DeepThemeExtension<BaseTheme, ThemeType> = {\n  [Key in keyof BaseTheme]?: BaseTheme[Key] extends (...args: any[]) => any\n    ? DeepThemeExtension<\n        Partial<ReturnType<BaseTheme[Key]>>,\n        CloneKey<ThemeType, Key>\n      >\n    : BaseTheme[Key] extends object\n    ? DeepThemeExtension<Partial<BaseTheme[Key]>, CloneKey<ThemeType, Key>>\n    : CloneKey<ThemeType, Key>\n}\n\nexport type ThemeOverride = Partial<ChakraTheme> &\n  DeepThemeExtension<DefaultChakraTheme, ChakraTheme>\n\n/**\n * Function to override or customize the Chakra UI theme conveniently\n * @param overrides - Your custom theme object overrides\n * @param baseTheme - theme to customize\n */\nexport function extendTheme<\n  BaseTheme extends ChakraTheme = DefaultChakraTheme,\n  Overrides extends ThemeOverride = ThemeOverride\n>(\n  overrides: Overrides,\n  baseTheme: BaseTheme = defaultTheme as BaseTheme,\n): BaseTheme & Overrides {\n  function customizer(\n    source: unknown,\n    override: unknown,\n    key: string,\n    object: any,\n  ) {\n    if (\n      (isFunction(source) || isFunction(override)) &&\n      Object.prototype.hasOwnProperty.call(object, key)\n    ) {\n      return (...args: unknown[]) => {\n        const sourceValue = isFunction(source) ? source(...args) : source\n\n        const overrideValue = isFunction(override)\n          ? override(...args)\n          : override\n\n        return mergeWith({}, sourceValue, overrideValue, customizer)\n      }\n    }\n\n    // fallback to default behaviour\n    return undefined\n  }\n\n  return mergeWith({}, baseTheme, overrides, customizer)\n}\n"],"file":"extend-theme.js"}