{"version":3,"sources":["../../src/extend-theme.ts"],"names":["defaultTheme","isFunction","mergeWith","extendTheme","overrides","baseTheme","customizer","source","override","key","object","Object","prototype","hasOwnProperty","call","sourceValue","overrideValue","undefined"],"mappings":"AAAA,OAAOA,YAAP,MAA8D,kBAA9D;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;;AAuBA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAT,CAILC,SAJK,EAKLC,SALK,EAMkB;AAAA,MADvBA,SACuB;AADvBA,IAAAA,SACuB,GADAL,YACA;AAAA;;AACvB,WAASM,UAAT,CACEC,MADF,EAEEC,QAFF,EAGEC,GAHF,EAIEC,MAJF,EAKE;AACA,QACE,CAACT,UAAU,CAACM,MAAD,CAAV,IAAsBN,UAAU,CAACO,QAAD,CAAjC,KACAG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CD,GAA7C,CAFF,EAGE;AACA,aAAO,YAAwB;AAC7B,YAAMM,WAAW,GAAGd,UAAU,CAACM,MAAD,CAAV,GAAqBA,MAAM,CAAC,YAAD,CAA3B,GAAuCA,MAA3D;AAEA,YAAMS,aAAa,GAAGf,UAAU,CAACO,QAAD,CAAV,GAClBA,QAAQ,CAAC,YAAD,CADU,GAElBA,QAFJ;AAIA,eAAON,SAAS,CAAC,EAAD,EAAKa,WAAL,EAAkBC,aAAlB,EAAiCV,UAAjC,CAAhB;AACD,OARD;AASD,KAdD,CAgBA;;;AACA,WAAOW,SAAP;AACD;;AAED,SAAOf,SAAS,CAAC,EAAD,EAAKG,SAAL,EAAgBD,SAAhB,EAA2BE,UAA3B,CAAhB;AACD","sourcesContent":["import defaultTheme, { ChakraTheme, DefaultChakraTheme } from \"@chakra-ui/theme\"\nimport { isFunction, mergeWith } from \"@chakra-ui/utils\"\n\ntype CloneKey<Target, Key> = Key extends keyof Target ? Target[Key] : unknown\n\n/**\n * Represents a loose but specific type for the theme override.\n * It provides autocomplete hints for extending the theme, but leaves room\n * for adding properties.\n */\ntype DeepThemeExtension<BaseTheme, ThemeType> = {\n  [Key in keyof BaseTheme]?: BaseTheme[Key] extends (...args: any[]) => any\n    ? DeepThemeExtension<\n        Partial<ReturnType<BaseTheme[Key]>>,\n        CloneKey<ThemeType, Key>\n      >\n    : BaseTheme[Key] extends object\n    ? DeepThemeExtension<Partial<BaseTheme[Key]>, CloneKey<ThemeType, Key>>\n    : CloneKey<ThemeType, Key>\n}\n\nexport type ThemeOverride = Partial<ChakraTheme> &\n  DeepThemeExtension<DefaultChakraTheme, ChakraTheme>\n\n/**\n * Function to override or customize the Chakra UI theme conveniently\n * @param overrides - Your custom theme object overrides\n * @param baseTheme - theme to customize\n */\nexport function extendTheme<\n  BaseTheme extends ChakraTheme = DefaultChakraTheme,\n  Overrides extends ThemeOverride = ThemeOverride\n>(\n  overrides: Overrides,\n  baseTheme: BaseTheme = defaultTheme as BaseTheme,\n): BaseTheme & Overrides {\n  function customizer(\n    source: unknown,\n    override: unknown,\n    key: string,\n    object: any,\n  ) {\n    if (\n      (isFunction(source) || isFunction(override)) &&\n      Object.prototype.hasOwnProperty.call(object, key)\n    ) {\n      return (...args: unknown[]) => {\n        const sourceValue = isFunction(source) ? source(...args) : source\n\n        const overrideValue = isFunction(override)\n          ? override(...args)\n          : override\n\n        return mergeWith({}, sourceValue, overrideValue, customizer)\n      }\n    }\n\n    // fallback to default behaviour\n    return undefined\n  }\n\n  return mergeWith({}, baseTheme, overrides, customizer)\n}\n"],"file":"extend-theme.js"}