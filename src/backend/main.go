package main

import (
	"log"
	"os"

	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	"github.com/robogeek95/ginCrud/config"
	"github.com/robogeek95/ginCrud/models"
	"github.com/robogeek95/ginCrud/routes"
	_ "gorm.io/driver/postgres"
)

var (
	// WarningLogger ... for logging warnings
	WarningLogger *log.Logger
	// InfoLogger ... for logging warnings
	InfoLogger *log.Logger
	// ErrorLogger ... for logging warnings
	ErrorLogger *log.Logger
)

var err error

func main() {
	// first initialize the logger

	//  If the file doesn't exist, create it or append to the file
	file, err := os.OpenFile("logs.txt", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0666)
	if err != nil {
		log.Fatal(err)
	}

	// custom loggers:
	//	 out: Any type that implements the io.Writer interface, which is where the log data will be written to
	//	 prefix: A string that is appended to the beginning of each log line
	//	 flag: A set of constants that allow us to define which logging properties to include in each log entry generated by the logger (more on this in the next section)

	InfoLogger = log.New(file, "INFO: ", log.Ldate|log.Ltime|log.Lshortfile)
	WarningLogger = log.New(file, "WARNING: ", log.Ldate|log.Ltime|log.Lshortfile)
	ErrorLogger = log.New(file, "ERROR: ", log.Ldate|log.Ltime|log.Lshortfile)

	log.SetOutput(file)

	log.Println("Hello Logger!")
	InfoLogger.Println("Starting the application...")
	InfoLogger.Println("Something noteworthy happened")
	WarningLogger.Println("There is something you should know about")
	ErrorLogger.Println("Something went wrong")

	// setUp the database

	InfoLogger.Println("connecting to database")
	// config.DB, err = gorm.Open("mysql", config.DbURL(config.BuildDBConfig()))
	// dsn := "host=localhost user=gorm password=gorm dbname=gorm port=9920 sslmode=disable TimeZone=Asia/Shanghai"
	config.DB, err = gorm.Open("postgres", "user=postgres password=roborealm1 dbname=gincrud1 sslmode=disable")

	// Migrate the schema
	config.DB.AutoMigrate(&models.Material{})

	if err != nil {
		ErrorLogger.Println("Status:", err)
		panic("Can't connect to database")
	}
	InfoLogger.Println("connected to database")

	// Initialize the routes
	r := routes.SetupRouter()

	// Start serving the application
	InfoLogger.Println("serving application")
	r.Run()
}
